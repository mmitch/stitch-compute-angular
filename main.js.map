{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;;AACoE;AACZ;AACK;AAE7B,CAAC,qBAAqB;;;;;;IC6BtD,0EAA8D;IAAtB,wRAAS,4EAAW,KAAC;IAC3D,0EAAqC;IAAtB,wRAAS,4EAAW,KAAC;IAClC,qEAAI;IAAwE,yEAAc;IAAA,4DAAI;IAC9F,oEAAkB;IAAlB,gEAAkB;IACuC,+DAAY;IAErE,yDAAI;IAAJ,4DAAI;IACJ,oEAAkB;IAAlB,iEAAkB;IACoD,gEAAW;IAEjF,yDAAI;IAAJ,4DAAI;IACJ,qEAAkB;IAAlB,iEAAkB;IAC4C,gEAAS;IACvE,yDAAI;IAAJ,4DAAI;IACJ,qEAAkB;IAAlB,iEAAkB;IACI,gEAAsB;IAG5C,yDAAI;IAAJ,4DAAI;IACJ,6EAAsF;IAAjD,4RAAS,4EAAW,KAAC;IAA1D,4DAAsF;IAAK,4DAAS;IAEtG,2EAAuC;IAAvC,4DAAuC;IAEvC,4DAAM;;;IAAN,2DAAM;IAAN,mFAAM;IAAN,6DAAM;;AD7CD,MAAM,YAAY;IALzB;QAMW,wBAAmB,GAAiB;YAC3C,YAAY,EAAE,SAAS,oBAAmB;YAC1C,WAAW,EAAE,SAAS,mBAAkB;YACxC,eAAe,EAAE,SAAS,uBAAsB;YAChD,iBAAiB,EAAE,SAAS,4BAA2B;YACvD,aAAa,EAAE,SAAS,2BAA0B;SACnD,CAAC;QACO,UAAK,GAAG,IAAI,qDAAS,CAAC;YAC7B,IAAI,EAAE,IAAI,uDAAW,CAAS,CAAC,EAAE,CAAC,+DAAmB,EAAE,0DAAc,CAAC,CAAC,CAAC,EAAE,0DAAc,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/F,EAAE,EAAE,IAAI,uDAAW,CAAS,CAAC,EAAE,CAAC,+DAAmB,EAAE,0DAAc,CAAC,CAAC,CAAC,EAAE,0DAAc,CAAC,GAAG,CAAC,CAAC,CAAC;SAC9F,CAAC,CAAC;QACM,aAAQ,GAAG,IAAI,yDAAa,EAAE,CAAC;QAC/B,cAAS,GAAG,kEAAU,CAAC;QAChC,WAAM,GAAG,EAAE,CAAC;QACZ,UAAK,GAAG,EAAE,CAAC;QACX,kBAAa,GAAG,KAAK,CAAC;KAgEvB;IA9DC,QAAQ;QACN,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACtD,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,OAAO,EAAE;YACjC,IAAI;gBACF,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC5B,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;gBACxB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;aACtD;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,YAAY,KAAK,EAAE;oBACtB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;iBAC1B;qBAAM;oBACL,IAAI,CAAC,QAAQ,CAAC,SAAS,qCAAoC,CAAC,CAAC;oBAC7D,MAAM,CAAC,CAAC;iBACT;aACF;SACF;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,SAAS,mCAAkC,CAAC,CAAC;SAC5D;IACH,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAEM,SAAS;QACd,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEO,OAAO;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;IACpC,CAAC;IAEO,KAAK;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,6EAA6E;IACrE,aAAa,CAAC,IAAY,EAAE,EAAU;QAC5C,MAAM,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;QACrB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC,IAAI,EAAE,GAAG,GAAG,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,SAAS,8CAA6C,IAAI,gBAAgB,GAAG,MAAM,CAAC,CAAC;SACtG;QACD,IAAI,EAAE,GAAG,GAAG,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,SAAS,gDAA+C,IAAI,kBAAkB,GAAG,MAAM,CAAC,CAAC;SAC1G;IACH,CAAC;;wEA/EU,YAAY;0GAAZ,YAAY;;;;;;;;iBCXwB,qCAAK;;;;;;;;;iBAYP,iCAAG;;;;;;;;;iBAmBkC,oCAAI;;;;;;;;;iBAKlE,8EACuC,iCAAG,yBAAK,mCAAI,2EACzD,iCAAG,uBAAG,mCAAI,sBACtB;;;;;;;;;iBACkB,2FACoD,mDAAG,0BAAI,sDAAI,iCAAW,mDAAG,qBAAC,sDAAI,uBAClG,mDAAG,yBAAG,sDAAI,uCAAiB,mDAAG,qBAAC,sDAAI,yBAAK,mDAAG,6BAAO,sDAAI,8CAAwB,mDAAG,qBAAC,sDAAI,sBACxF;;;;;;;;;kBACkB,mFAC4C,iBAAG,sBAAE,kBAAI,2BAAO,iBAAG,4CAAsB,kBAAI,uBAC3G;;;;;;;;;kBACkB,2CACI,mEAAG,yBAAe,uEAAI,qBAAC,mEAAG,sBAAO,uEAAI,gHACd,mEAAG,gCAAgC,uEAAI,6CAClF,mEAAG,qCAA0C,uEAAI,qBACnD;;;;;;;;;kBACsF,sCAAK;;;;;;;;;kBAEtD,oCAC5B,eAAyB,wBAAM,eAAsB,qBAAC,eAA0B,oBAC3F;;QAzDF,0EAA0B;QACxB,0DAA+C;QAAK,4DAAQ;QAC5D,2EAUE;QAPA,mIAAS,iBAAa,IAAC;QAHzB,4DAUE;QACF,2EAA6C;QAA7C,0DAA6C;QAAG,4DAAQ;QACxD,2EAUE;QAPA,mIAAS,iBAAa,IAAC;QAHzB,4DAUE;QAGJ,yEAAsC;QACpC,uDACA;QAAA,yEAAoC;QAAA,wDAAW;QAAA,4DAAM;QAGvD,6EAAoF;QAA/C,qIAAS,cAAU,IAAC;QAAzD,2DAAoF;QAAI,4DAAS;QAEjG,4GAwBM;;QA1DA,gFAAmB;QA4BvB,0DACA;QADA,sFACA;QAAoC,0DAAW;QAAX,0EAAW;QAK3C,0DAAmB;QAAnB,mFAAmB;;;;;;;;;;;;;;;;;;;;;;ACjC4B;AACK;AAEX;AACe;AACJ;;;AAYnD,MAAM,SAAS;;kEAAT,SAAS;sGAAT,SAAS,cAFR,wDAAY;0GALtB,oEAAa;QACb,+DAAmB;QACnB,iFAA4B,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,6EAAsB,EAAE,CAAC;mIAK1E,SAAS,mBATL,wDAAY,aAEzB,oEAAa;QACb,+DAAmB;;;;;;;;;;;;;;;ACZhB,MAAM,UAAU,GAAG;IACxB,MAAM,EAAE,SAAS;IACjB,UAAU,EAAE,qBAAqB;IACjC,SAAS,EAAE,qBAAqB;CACjC,CAAC;;;;;;;;;;;;;;;ACJF,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;ACfvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB;KACrB,eAAe,CAAC,sDAAS,CAAC;KAC1B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/buildinfo.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BUILD_INFO } from 'src/environments/buildinfo';\nimport { FormatterSet, StitchCompute } from 'stitch-compute';\n\nimport '@angular/localize/init'; // provides $localize\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  readonly localizedFormatters: FormatterSet = {\n    keepStitches: $localize`:@@keepFormat:K%d`,\n    addStitches: $localize`:@@addFormat:A%d`,\n    combineStitches: $localize`:@@combineFormat:C%d`,\n    groupInstructions: $localize`:@@groupFormat:%dx ( %s )`,\n    listSeparator: $localize`:@@listSeparatorFormat: `\n  };\n  readonly input = new FormGroup({\n    from: new FormControl<number>(1, [Validators.required, Validators.min(1), Validators.max(512)]),\n    to: new FormControl<number>(1, [Validators.required, Validators.min(1), Validators.max(512)])\n  });\n  readonly stitches = new StitchCompute();\n  readonly buildInfo = BUILD_INFO;\n  result = '';\n  error = '';\n  isHelpVisible = false;\n\n  ngOnInit(): void {\n    this.stitches.setFormatters(this.localizedFormatters);\n    this.recalculate();\n  }\n\n  recalculate(): void {\n    if (this.input.status === 'VALID') {\n      try {\n        const from = this.getFrom();\n        const to = this.getTo();\n        this.validateInput(from, to);\n        this.setResult(this.stitches.adjustEvenly(from, to));\n      } catch (e) {\n        if (e instanceof Error) {\n          this.setError(e.message);\n        } else {\n          this.setError($localize`:@@errUncaughtError:uncaught error`);\n          throw e;\n        }\n      }\n    } else {\n      this.setError($localize`:@@errInvalidInput:invalid input`);\n    }\n  }\n\n  setResult(result: string): void {\n    this.result = result;\n    this.error = '';\n  }\n\n  setError(error: string): void {\n    this.result = '';\n    this.error = error;\n  }\n\n  public openHelp(): void {\n    this.isHelpVisible = true;\n  }\n\n  public closeHelp(): void {\n    this.isHelpVisible = false;\n  }\n\n  private getFrom(): number {\n    return this.input.value.from || 0;\n  }\n\n  private getTo(): number {\n    return this.input.value.to || 0;\n  }\n\n  // duplicate checks from stitch-compute to allow for localized error messages\n  private validateInput(from: number, to: number) {\n    const max = 2 * from;\n    const min = Math.floor((from + 1) / 2);\n    if (to > max) {\n      throw new Error($localize`:@@errToTooBig:too many stitches to add - ${from} can grow to ${max} max`);\n    }\n    if (to < min) {\n      throw new Error($localize`:@@errToTooSmall:too few stitches to keep - ${from} can shrink to ${min} min`);\n    }\n  }\n}\n","<form [formGroup]=\"input\">\n  <label class=\"label\" i18n=\"@@label-input-from\">From:</label>\n  <input\n    class=\"input\"\n    type=\"number\"\n    (input)=\"recalculate()\"\n    formControlName=\"from\"\n    size=\"3\"\n    min=\"1\"\n    max=\"512\"\n    data-testid=\"input-from\"\n    required\n  />\n  <label class=\"label\" i18n=\"@@label-input-to\">To:</label>\n  <input\n    class=\"input\"\n    type=\"number\"\n    (input)=\"recalculate()\"\n    formControlName=\"to\"\n    size=\"3\"\n    min=\"1\"\n    max=\"512\"\n    data-testid=\"input-to\"\n    required\n  />\n</form>\n\n<div id=\"result\" data-testid=\"result\">\n  {{ result }}\n  <div id=\"error\" data-testid=\"error\">{{ error }}</div>\n</div>\n\n<button type=\"button\" class=\"button\" (click)=\"openHelp()\" i18n=\"@@button-open-help\">Help</button>\n\n<div *ngIf=\"isHelpVisible\" id=\"grayout\" (click)=\"closeHelp()\">\n  <div id=\"help\" (click)=\"closeHelp()\">\n    <h1><a id=\"project\" href=\"https://github.com/mmitch/stitch-compute-angular\">Stitch Compute</a></h1>\n    <p i18n=\"@@help1\">\n      Enter both the number of stitches on your current row (<b>From:</b>) and the desired number of stitches on your\n      next row (<b>To:</b>).\n    </p>\n    <p i18n=\"@@help2\">\n      The result will be shown immediately and consist of instructions to <i>keep</i> stitches (<b>K</b>),\n      <i>add</i> extra stitches (<b>A</b>) or <i>combine</i> two stitches into one (<b>C</b>).\n    </p>\n    <p i18n=\"@@help3\">\n      The number after a letter is the number of repetitions, eg. <b>A2</b> means <i>add two extra stitches</i>.\n    </p>\n    <p i18n=\"@@help4\">\n      Global repetitions (<b>2x&nbsp;(&nbsp;</b>â€¦<b>&nbsp;)</b>) instruct you to repeat all stitches inside the\n      parentheses the given number of times, eg. <b>3x&nbsp;(&nbsp;K1&nbsp;A1&nbsp;)</b> is a shorter version of\n      <b>K1&nbsp;A1&nbsp;K1&nbsp;A1&nbsp;K1&nbsp;A1</b>.\n    </p>\n    <button type=\"button\" class=\"button\" (click)=\"closeHelp()\" i18n=\"@@button-close-help\">Close</button>\n  </div>\n  <div id=\"buildinfo\" i18n=\"@@buildinfo\">\n    built at {{ buildInfo.buildTime }} from {{ buildInfo.commit }}/{{ buildInfo.lastChange }}\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","export const BUILD_INFO = {\n  commit: '888b9d8',\n  lastChange: '2023-12-15 15:55:01',\n  buildTime: '2023-12-15 15:56:28'\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}